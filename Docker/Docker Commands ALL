# Solution to Manage Multiple Containers

 1071  docker container ls -a
 1072  docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
 1073  docker container logs db
 1074  docker container run -d --name webserver -p 8080:80 httpd
 1075  docker container run -d --name proxy -p 80:80 nginx
 1076  docker ps
 1077  docker container ls
 1078  curl localhost
 1079  curl localhost:8080
 1080  clear
 1081  docker ls
 1082  docker ps
 1083  docker container stop 170 75e 8c0 
 1084  docker container ls -a
 1085  docker container rm 75e 170 8c0
 1086  docker container ls -a

# Getting Shell inside containers

 1098  docker container stats
 1099  docker container ls
 1100  docker container run -it --name proxy nginx bash
 1101  docker container ls
 1102  docker container ls -a
 1103  docker container run -it --name ubuntu ubuntu
 1104  docker container ls -a
 1105  docker container start -ai ubuntu
 1106  docker container exec --help
 1107  docker container exec -it mysql bash
 1108  docker container exec -it mysql bash
 1109  docker container ls
 1110  docker pull alpine

# Note for next lectures on Docker Networks

Hey just a quick note before doing the next few lectures. A recent June 2017 change in the official nginx image https://hub.docker.com/_/nginx (nginx  or nginx:latest ) removes ping, but I use it in the next few videos to test connectivity, so you might get an error about "ping not found". I'm working on updates to those videos but until I can get them processed and uploaded, just do this:

Anywhere I do a docker container run <stuff> nginx , where nginx  is the image you should use, replace that with nginx:alpine , which still has ping command in it.

# Docker Networks CLI Management 

 1125  docker network ls
 1126   docker network inspect bridge
 1127  docker network create my_app_net
 1128  docker network ls
 1129  docker create --help
 1130  docker container run -d --name new_nginx --network my_app_net nginx
 1131   docker network inspect my_app_net
 1132  docker network ls
 1133  docker network connect f105cb14e9bc 46a922116a74
 1134  docker container ls
 1135  docker network connect 46a922116a74 ff36991fd147
 1136  docker container inspect ff36991fd147
 1137  docker network disconnect 46a922116a74 ff36991fd147
 1138  docker container inspect ff36991fd147
 1111  docker image ls
 1112  docker container run -it alpine bash
 1113  docker container run -it alpine sh

# Docker Networks DNS

 1155  docker container run -d --name my_nginx --network my_app_net nginx:alpine
 1156  docker network inspect 46a922116a74
 1157  docker container exec -it my_nginx ping new_nginx
 1158  docker container exec -it new_nginx ping my_nginx
 1159  docker container ls
 1160  docker container stop c5e93b2a99f9
 1161  docker container stop 52276a1514cd
 1162  docker container rm  52276a1514cd
 1163  docker network ls
 1164  docker network inspect 46a922116a74
 1165  docker container run -d --name new_nginx --network my_app_net nginx:alpine
 1166  docker network inspect 46a922116a74
 1167  docker container exec -it my_nginx ping new_nginx
 1168  docker container exec -it new_nginx ping my_nginx
 1169  docker network ls


# Assignment CLI App Testing Solution
docker container run --rm -it centos:7 bash

docker ps -a

docker container run --rm -it ubuntu:14.04 bash

docker ps -a

# DNS Round Robin Test
 1205  docker network create dude
 1206  docker container run -d --net dude --net-alias search elasticsearch:2
 1207  docker container ls
 1208  docker container run -d --net dude --net-alias search bretfisher/httpenv
 1209  docker container ls
 1210  docker container run -d --net dude --net-alias search bretfisher/httpenv
 1211  docker container ls
 1212  docker container run --rm --net dude alpine nslookup search
 1213  docker container run --rm --net dude centos curl -s search:8888
 1214  docker container run --rm --net dude centos curl -s search:8888

# Docker Images Layers and Tags 

 1237  docker image push olisabosun/nginx
 1238  docker pull
 1239  clear
 1240  docker image ls
 1241  docker image rm 070027a3cbe0
 1242  docker image rm -f 070027a3cbe0
 1243  docker image ls
 1244  docker image tag nginx olisabosun/nginx
 1245  docker pull nginx
 1246  docker image tag nginx olisabosun/nginx
 1247  docker image ls
 1248  docker image push olisabosun/nginx
 1249  docker image tag  olisabosun/nginx olisabosun/nginx:testing
 1250  docker image ls
 1251  docker image push olisabosun/nginx:testing
 1252  docker image ls

# Running Docker Builds

docker image build -t customnginx .

# Extending Official Images 

 1300  docker container run -p 80:80 --rm nginx
 1301  docker image build -t nginx-with-html .
 1302  docker container run -p 80:80 --rm nginx-with-html
 1303  docker image ls
 1304  docker image tag nginx-with-html:latest olisabosun/nginx-with-html:latest
 1305  docker image ls
 1306  docker push
 1307  docker image push --help
 1308  docker image push olisabosun/nginx-with-html:latest

# Build Your own Docker file and Run containers from it

 1419  docker image build -t nodeapp .
 1420  docker image ls
 1421  docker container run -p 3000:80 nodeapp
 1422  docker container ls
 1423  docker container run -p 80:80 --rm nodeapp
 1424  docker container run -p 80:80 --rm nodeapp:latest
 1425  ls -l
 1426  docker container run --rm -p 80:3000 nodeapp
 1427  docker images ls
 1428  docker tag nodeapp olisabosun/node-app
 1429  docker push --help
 1430  docker push olisabosun/node-app
 1431  docker image ls
 1432  docker image rm olisabosun/node-app
 1433  docker container run --rm -p 80:3000 olisabosun/node-app

Using Prune to Keep Your Docker System Clean (YouTube)
You can use "prune" commands to clean up images, volumes, build cache, and containers. Examples include:
- docker image prune to clean up just "dangling" images

- docker system prune will clean up everything you're not currently using
# Persistent Data Volumes, Named Volumes

 1454  docker volume ls
 1455  docker container run -d --name mysql -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
 1456  docker volume ls
 1457  docker volume inspect mysql-db
 1458  docker container rm -f mysql
 1459  docker container run -d --name mysql3 -e MYSQL_ALLOW_EMPTY_PASSWORD=True -v mysql-db:/var/lib/mysql mysql
 1460  docker volume ls
 1461  docker container inspect mysql3
